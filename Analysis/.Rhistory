}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz~dx$physpos)
}
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep=\t,stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup
auth[! auth%in% signedup]
sum(auth%in% signedup)
sum(auth%in% signedup[,1])
sum(auth[,1]%in% signedup[,1])
sum(auth[,1] %in% signedup[,1])
auth[,1]
sum(auth[,2]%in% signedup[,1])
auth[! auth[,2]%in% signedup[,1]]
auth[! auth[,2]%in% signedup[,1],2]
x = rbind(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
signedup[,1]
auth[! auth[,2]%in% signedup[,1],2]
x = c(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt")
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F)
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F, quote=F)
for(p in c("knitr","rmarkdown","lme4","ggplot2","usdm","party","plyr","ade4","ecodist","vegan","lattice","cwhmisc","ape","adegenet","pegas","MASS","caper","geiger","nlme","phytools")){install.packages(p)}
install.packages("arm")
install.packages("rethinking")
install.packages("rethinking")
install.packages(c('devtools','coda','mvtnorm'))
library(devtools)
install_github("rmcelreath/rethinking")
library(cwhmisc)
library(lme4)
?lmer()
?lmerControl
w = 152.4
h = 228.6
l = 0
t = 0
bp2mm = 2.83467
w*bp2mm
h*bp2mm
l *bp2mm
t *bp2mm
paste( "'", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "'",
sep = '')
w = 152.4
h = 228.6
l = 40
t = 50
bp2mm = 2.83467
paste( "pdfcrop --margin '", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margin '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --bbox '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
l*bp2mm, " ",
t*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l
t
-l*bp2mm
595 * (1/2.83467)
l
w0 - (2*l)
paste( "pdfcrop --bbox '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l*bp2mm
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '0 0 0 0' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0,0,w0*bp2mm,h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.35
h = 228.55
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
library(ape)
rtree(10)
t = rtree(10)
d = matrix(rnorm(100),nrow=10)
t
plot(t)
d
d[upper.tri(d)] = d[lower.tri(d)]
diag(d) = 0
library(ecodist)
??patristic
vcov(t)
?vcov
source("http://www.bioconductor.org/biocLite.R")
biocLite("msa")
stringdist("hound","hand", method = 'osa')
library(stringdist)
stringdist("hound","hand", method = 'osa')
?"stringdist"
12/28
library(gplots)
library(lattice)
setwd("~/Documents/MPI/TurnTaking_CulturalEvolution/NewModel/Analysis")
d = read.table("../Results/BigSweep_probScale.tab",sep='\t',header=TRUE)
d$learn_as_talking = F
d$turnEffect = as.factor(d$n_turns-d$n_conversations)
#n = length(levels(factor(d$turnEffect)))
#n.labels = c("20,1","10,2","5,4","2,10","1,20")
actual.proportions = c(0.111413043,0.157608696,0.663043478)
actual.proportions = actual.proportions/sum(actual.proportions)
# sum of squared error
d$fit =
(abs(d$Prop_SOV - actual.proportions[3])^2)
+(abs(d$Prop_SVO - actual.proportions[2])^2)
+(abs(d$Prop_VSO - actual.proportions[1])^2)
xyplot(fit~probScale,groups=turnEffect,d,type='a',auto.key=T,xlab='prob scale',ylab="Sum of Squares")
# draw graph showing how the proporitons of orders change with probScale
vsox=tapply(d$Prop_VSO,paste(d$turnEffect,d$probScale),mean)
svox=tapply(d$Prop_SVO,paste(d$turnEffect,d$probScale),mean)
sovx=tapply(d$Prop_SOV,paste(d$turnEffect,d$probScale),mean)
vsox2 = vsox[grepl('-8',names(vsox))]
svox2 = svox[grepl('-8',names(svox))]
sovx2 = sovx[grepl('-8',names(sovx))]
d.sel = d[d$n_agents==10 & d$learn_as_talking==0 & d$prob_random==0 & d$probScale==0.1 & d$turnEffect %in% c(-19,19),]
vso=tapply(d.sel$Prop_VSO,d.sel$turnEffect,mean)
svo=tapply(d.sel$Prop_SVO,d.sel$turnEffect,mean)
sov=tapply(d.sel$Prop_SOV,d.sel$turnEffect,mean)
col3x = c("#e41a1c","#377eb8","#4daf4a")
n.labels = c("20,1","10,2","5,4","2,10","1,20")
barplot(cbind(
c(vso[1],svo[1],sov[1]),
c(vso[4],svo[4],sov[4]),
actual.proportions),beside=F,names.arg=c("20 conversations\n1 Turn","1 conversation\n20 turns","Actual data"),col=col3x)
text(0.7,c(0.2,0.55,0.85),c("VSO",'SVO',"SOV"),cex=2)
barplot(cbind(
c(vso[1],svo[1],sov[1]),
c(vso[4],svo[4],sov[4]),
actual.proportions),beside=F,names.arg=c("20 conversations\n1 Turn","1 conversation\n20 turns","Actual isolate\ndistribution"),col=col3x)
text(0.7,c(0.2,0.55,0.85),c("VSO",'SVO',"SOV"),cex=2)
pdf("../Writeup/images/pdf/MainModelRes.pdf", width=6, height=5.5)
barplot(cbind(
c(vso[1],svo[1],sov[1]),
c(vso[4],svo[4],sov[4]),
actual.proportions),beside=F,names.arg=c("20 conversations\n1 Turn","1 conversation\n20 turns","Actual isolate\ndistribution"),col=col3x)
text(0.7,c(0.2,0.55,0.85),c("VSO",'SVO',"SOV"),cex=2)
dev.off()
par(mfrow=c(1,3))
ntx = rbind(NoTurns[1:3],NoTurns[4:6],NoTurns[7:9])
barplot(t(t(ntx)/colSums(ntx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='20 conversations\n1 Turn')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
ttx = rbind(No=Turns[1:3],Final=Turns[4:6],Initial=Turns[7:9])
barplot(t(t(ttx)/colSums(ttx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='2 conversations\n10 Turns')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
load("../EstimatesOfRealData/QParticleRealDataEstiamtes.rDat")
barplot(estX2,names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='Estimated\ndistribution')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
par(mfrow=c(1,3))
ntx = rbind(NoTurns[1:3],NoTurns[4:6],NoTurns[7:9])
barplot(t(t(ntx)/colSums(ntx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='20 conversations\n1 Turn')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
ttx = rbind(No=Turns[1:3],Final=Turns[4:6],Initial=Turns[7:9])
barplot(t(t(ttx)/colSums(ttx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='2 conversations\n10 Turns')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
load("../EstimatesOfRealData/QParticleRealDataEstiamtes.rDat")
barplot(estX2,names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='Estimated\ndistribution')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
d = read.table("../Results/BigSweep_SentFinalParticle2.tab",sep='\t',header=TRUE, stringsAsFactors=F)
d = d[d$run!='run',]
for(i in 2:13){
d[,i] = as.numeric(d[,i])
}
d$turnEffect = as.factor(d$n_turns-d$n_conversations)
par(mfrow=c(1,3))
probscaleX = 0.1#0.5#0.1
particleDiscountX = 0.5#1#0.5
probRandomX = 0#0.05#0
turnEffectX = 8#19#8
sel = d$probScale==probscaleX & d$particleDiscount==particleDiscountX & d$prob_random ==probRandomX
NoTurns = colSums(d[d$turnEffect== -19 & sel ,2:10])
Turns = colSums(d[d$turnEffect==turnEffectX & sel,2:10])
par(mfrow=c(1,3))
ntx = rbind(NoTurns[1:3],NoTurns[4:6],NoTurns[7:9])
barplot(t(t(ntx)/colSums(ntx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='20 conversations\n1 Turn')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
ttx = rbind(No=Turns[1:3],Final=Turns[4:6],Initial=Turns[7:9])
barplot(t(t(ttx)/colSums(ttx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='2 conversations\n10 Turns')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
load("../EstimatesOfRealData/QParticleRealDataEstiamtes.rDat")
barplot(estX2,names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='Estimated\ndistribution')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
pdf("../Writeup/images/pdf/SentenceFinalParticles.pdf", width=7, height=4)
par(mfrow=c(1,3))
ntx = rbind(NoTurns[1:3],NoTurns[4:6],NoTurns[7:9])
barplot(t(t(ntx)/colSums(ntx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='20 conversations\n1 Turn')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
ttx = rbind(No=Turns[1:3],Final=Turns[4:6],Initial=Turns[7:9])
barplot(t(t(ttx)/colSums(ttx)),names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='2 conversations\n10 Turns')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
load("../EstimatesOfRealData/QParticleRealDataEstiamtes.rDat")
barplot(estX2,names.arg=c("V-","-V-","-V"),col=rev(c("light green","dark green",'light blue')),
xlab='Estimated\ndistribution')
text(0.7,0.7,"Initial\nParticle")
text(0.7,0.25,"Final\nParticle",col='white')
text(0.7,0.04,"No\nParticle")
dev.off()
i=  1
1:length(sort(unique(d$probScale)))
px = sort(unique(d$probScale))[i]
seq(1,5,by=0.1)^px
px
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Production ease',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
pxx = seq(1,5,by=0.1)^px
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
library(gplots)
library(lattice)
setwd("~/Documents/MPI/TurnTaking_CulturalEvolution/NewModel/Analysis")
d = read.table("../Results/BigSweep_probScale.tab",sep='\t',header=TRUE)
d$learn_as_talking = F
d$turnEffect = as.factor(d$n_turns-d$n_conversations)
#n = length(levels(factor(d$turnEffect)))
#n.labels = c("20,1","10,2","5,4","2,10","1,20")
actual.proportions = c(0.111413043,0.157608696,0.663043478)
actual.proportions = actual.proportions/sum(actual.proportions)
# sum of squared error
d$fit =
(abs(d$Prop_SOV - actual.proportions[3])^2)
+(abs(d$Prop_SVO - actual.proportions[2])^2)
+(abs(d$Prop_VSO - actual.proportions[1])^2)
xyplot(fit~probScale,groups=turnEffect,d,type='a',auto.key=T,xlab='prob scale',ylab="Sum of Squares")
# draw graph showing how the proporitons of orders change with probScale
vsox=tapply(d$Prop_VSO,paste(d$turnEffect,d$probScale),mean)
svox=tapply(d$Prop_SVO,paste(d$turnEffect,d$probScale),mean)
sovx=tapply(d$Prop_SOV,paste(d$turnEffect,d$probScale),mean)
vsox2 = vsox[grepl('-8',names(vsox))]
svox2 = svox[grepl('-8',names(svox))]
sovx2 = sovx[grepl('-8',names(sovx))]
###########
#layout(matrix(c(1,2,3,4,5,6,7,8,9,10,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12),nrow=2,byrow=T),heights=c(0.1,0.9))
colx = rainbow(2+length(sort(unique(d$probScale))))
#pdf("../Writeup/images/pdf/AlphaSettings.pdf", height=5,width=8)
layout(matrix(c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,1,1,1,1,1,1,1,12,12,12,12,12,12,12,12,12,12),nrow=2,byrow=T),heights=c(0.1,0.9))
par(mar=c(5,4,4,2) + 0.1)
# plot of cost curves
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Production ease',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
pxx = seq(1,5,by=0.1)^px
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
i = 1
px = sort(unique(d$probScale))[i]
px
seq(1,5,by=0.1)^px
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Production ease',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
# now displays processing cost rather than production ease
pxx = 1 - (seq(1,5,by=0.1)^px)
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
dev.off()
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Production ease',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
# now displays processing cost rather than production ease
pxx = 1 - (seq(1,5,by=0.1)^px)
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
library(gplots)
library(lattice)
setwd("~/Documents/MPI/TurnTaking_CulturalEvolution/NewModel/Analysis")
d = read.table("../Results/BigSweep_probScale.tab",sep='\t',header=TRUE)
d$learn_as_talking = F
d$turnEffect = as.factor(d$n_turns-d$n_conversations)
#n = length(levels(factor(d$turnEffect)))
#n.labels = c("20,1","10,2","5,4","2,10","1,20")
actual.proportions = c(0.111413043,0.157608696,0.663043478)
actual.proportions = actual.proportions/sum(actual.proportions)
# sum of squared error
d$fit =
(abs(d$Prop_SOV - actual.proportions[3])^2)
+(abs(d$Prop_SVO - actual.proportions[2])^2)
+(abs(d$Prop_VSO - actual.proportions[1])^2)
xyplot(fit~probScale,groups=turnEffect,d,type='a',auto.key=T,xlab='prob scale',ylab="Sum of Squares")
# draw graph showing how the proporitons of orders change with probScale
vsox=tapply(d$Prop_VSO,paste(d$turnEffect,d$probScale),mean)
svox=tapply(d$Prop_SVO,paste(d$turnEffect,d$probScale),mean)
sovx=tapply(d$Prop_SOV,paste(d$turnEffect,d$probScale),mean)
vsox2 = vsox[grepl('-8',names(vsox))]
svox2 = svox[grepl('-8',names(svox))]
sovx2 = sovx[grepl('-8',names(sovx))]
###########
#layout(matrix(c(1,2,3,4,5,6,7,8,9,10,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12),nrow=2,byrow=T),heights=c(0.1,0.9))
colx = rainbow(2+length(sort(unique(d$probScale))))
pdf("../Writeup/images/pdf/Fig7_AlphaSettings.pdf", height=5,width=8)
layout(matrix(c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,1,1,1,1,1,1,1,12,12,12,12,12,12,12,12,12,12),nrow=2,byrow=T),heights=c(0.1,0.9))
par(mar=c(5,4,4,2) + 0.1)
# plot of cost curves
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Processing cost',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
# now displays processing cost rather than production ease
pxx = 1 - (seq(1,5,by=0.1)^px)
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
par(mar=c(0,1,2,1))
plot(1:10,xaxt='n',yaxt='n',bty='n',xlab='',ylab='',col='white')
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
plot(seq(1,6,by=0.1),seq(1,6,by=0.1)^px,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
plot(1:10,xaxt='n',yaxt='n',bty='n',xlab='',ylab='',col='white')
par(mar=c(5, 4, 2, 4) + 0.1)
col3x = c("#e41a1c","#377eb8","#4daf4a")
barplot(rbind(vsox2,svox2,sovx2),col=col3x,names.arg=sort(unique(d$probScale)),xlab=expression(alpha), ylab='Proportion of runs converging to each order')
text(4.3,c(0.2,0.55,0.85),c("VSO",'SVO',"SOV"),cex=1)
dev.off()
plot(1:10,xaxt='n',yaxt='n',bty='n',xlab='',ylab='',col='white')
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
pxx = 5 - (seq(1,5,by=0.1)^px)
plot(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
pdf("../Writeup/images/pdf/Fig7_AlphaSettings.pdf", height=5,width=8)
layout(matrix(c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,1,1,1,1,1,1,1,12,12,12,12,12,12,12,12,12,12),nrow=2,byrow=T),heights=c(0.1,0.9))
par(mar=c(5,4,4,2) + 0.1)
# plot of cost curves
plot(0:1~c(1,5),xlab='Distance between verbs',ylab='Processing cost',bg='white', type='n', main=paste('Settings for',expression(alpha),'parameter'))
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
# now displays processing cost rather than production ease
pxx = 1 - (seq(1,5,by=0.1)^px)
pxx = (pxx - min(pxx))/max(pxx - min(pxx))
#	if(max((1:6))^px<1.1){
#		print(px)
#		pxx = 6+pxx
#	}
lines(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
par(mar=c(0,1,2,1))
plot(1:10,xaxt='n',yaxt='n',bty='n',xlab='',ylab='',col='white')
for(i in 1:length(sort(unique(d$probScale)))){
px = sort(unique(d$probScale))[i]
pxx = 5 - (seq(1,5,by=0.1)^px)
plot(seq(1,5,by=0.1),pxx,type='l',col=colx[i+2],xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
}
plot(1:10,xaxt='n',yaxt='n',bty='n',xlab='',ylab='',col='white')
par(mar=c(5, 4, 2, 4) + 0.1)
col3x = c("#e41a1c","#377eb8","#4daf4a")
barplot(rbind(vsox2,svox2,sovx2),col=col3x,names.arg=sort(unique(d$probScale)),xlab=expression(alpha), ylab='Proportion of runs converging to each order')
text(4.3,c(0.2,0.55,0.85),c("VSO",'SVO',"SOV"),cex=1)
dev.off()
