for(p in c("knitr","rmarkdown","lme4","ggplot2","usdm","party","plyr","ade4","ecodist","vegan","lattice","cwhmisc","ape","adegenet","pegas","MASS","caper","geiger","nlme","phytools")){install.packages(p)}
install.packages("arm")
install.packages("rethinking")
install.packages("rethinking")
install.packages(c('devtools','coda','mvtnorm'))
library(devtools)
install_github("rmcelreath/rethinking")
library(cwhmisc)
library(lme4)
?lmer()
?lmerControl
w = 152.4
h = 228.6
l = 0
t = 0
bp2mm = 2.83467
w*bp2mm
h*bp2mm
l *bp2mm
t *bp2mm
paste( "'", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "'",
sep = '')
w = 152.4
h = 228.6
l = 40
t = 50
bp2mm = 2.83467
paste( "pdfcrop --margin '", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margin '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --bbox '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
l*bp2mm, " ",
t*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l
t
-l*bp2mm
595 * (1/2.83467)
l
w0 - (2*l)
paste( "pdfcrop --bbox '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l*bp2mm
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '0 0 0 0' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0,0,w0*bp2mm,h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.35
h = 228.55
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
library(ape)
rtree(10)
t = rtree(10)
d = matrix(rnorm(100),nrow=10)
t
plot(t)
d
d[upper.tri(d)] = d[lower.tri(d)]
diag(d) = 0
library(ecodist)
??patristic
vcov(t)
?vcov
d.wals = read.csv("wals_data/language.csv",na.string='')
setwd("~/Documents/MPI/TurnTaking_CulturalEvolution/NewModel/EstimatesOfRealData/")
d.wals = read.csv("wals_data/language.csv",na.string='')
library(lme4)
dim(d.wals)
names(d.wals)
table(d.wals$X1A.Consonant.Inventories)
table(d.wals$X10A.Vowel.Nasalization)
table(d.wals$X79A.Suppletion.According.to.Tense.and.Aspect)
---
title: "Testing the relationship between verb position and position of verbal affixes"
output: pdf_document
---
# Load libraries
```{r}
library(lme4)
```
# Load data
```{r}
d.wals = read.csv("wals_data/language.csv",na.string='')
```
Make a variable which marks the position of the verb.
```{r}
OrderSOV = as.character(d.wals$X81A.Order.of.Subject..Object.and.Verb)
d.wals$VerbPos = NA
d.wals[OrderSOV %in% c('1 SOV','6 OSV'),]$VerbPos = 3
d.wals[OrderSOV %in% c('2 SVO','5 OVS'),]$VerbPos = 2
d.wals[OrderSOV %in% c('3 VSO','4 VOS'),]$VerbPos = 1
# Variable for whether language is verb-initial
d.wals$VerbInitial = d.wals$VerbPos==1
```
Make a variable that distinguishes between suffixing and prefixing inflectional morphology.
```{r}
InfMorph = as.character(d.wals$X26A.Prefixing.vs..Suffixing.in.Inflectional.Morphology)
d.wals$Aff = NA
d.wals$Aff[InfMorph=="2 Strongly suffixing"] = 'Suff'
d.wals$Aff[InfMorph=="3 Weakly suffixing"] = 'Suff'
d.wals$Aff[InfMorph=="5 Weakly prefixing"] = 'Pre'
d.wals$Aff[InfMorph=="6 Weakly prefixing"] = 'Pre'
sum(is.na(d.wals$Aff))
sum(!is.na(d.wals$Aff))
i = 9
lmA0 = glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
# Main model.
lmA1 = glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
anova(lmA0,lmA1)
a = anova(lmA0,lmA1)
a$Chisq
a$Chisq[1]
a$Chisq[2]
a$`Pr(>Chisq)`[2]
res = data.frame()
for(i in 9:ncol(d.wals)){
lmA0 = glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
# Main model.
lmA1 = glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
a = anova(lmA0,lmA1)
res = rbind(res, c(a$Chisq[2],a$`Pr(>Chisq)`[2]))
}
i
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
i = 10
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
i = 11
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
i = 12
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
i = 13
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit))
lmA1 =
trycatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1 =
tryCatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1
a$Df
a
a$`Chi Df`[2]
colnames(d.wals)[1]
colnames(d.wals)[i]
res = data.frame()
for(i in 9:ncol(d.wals)){
if(sum(!is.na(d.wals[,i]) & !is.na(d.wals$Aff))> 50){
lmA0 =
tryCatch(
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1 =
tryCatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
if(!is.na(lmA1) & !is.na(lmA0)){
a = anova(lmA0,lmA1)
res = rbind(res, c(colnames(d.wals)[i],a$Chisq[2],a$`Chi Df`[2],a$`Pr(>Chisq)`[2]))
}
}
}
head(res)
names(res) = c("var",'chi','df','p')
res = res[!is.na(res$var)]
res
res = data.frame()
for(i in 9:ncol(d.wals)){
if(sum(!is.na(d.wals[,i]) & !is.na(d.wals$Aff))> 50){
lmA0 =
tryCatch(
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1 =
tryCatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
if(!is.na(lmA1) & !is.na(lmA0)){
a = anova(lmA0,lmA1)
res = rbind(res,
c(colnames(d.wals)[i],
a$Chisq[2],
a$`Chi Df`[2],
a$`Pr(>Chisq)`[2]))
}
}
}
res
warnings()
res = data.frame(var='',chi='',df='',p='', stringsAsFactors = F)
for(i in 9:ncol(d.wals)){
if(sum(!is.na(d.wals[,i]) & !is.na(d.wals$Aff))> 50){
lmA0 =
tryCatch(
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1 =
tryCatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
if(!is.na(lmA1) & !is.na(lmA0)){
a = anova(lmA0,lmA1)
res = rbind(res,
c(colnames(d.wals)[i],
a$Chisq[2],
a$`Chi Df`[2],
a$`Pr(>Chisq)`[2]))
}
}
}
res
names(res) = c("var",'chi','df','p')
res = res[!is.na(res$var),]
res
res$p = as.numeric(res$p)
res
hist(res$p)
lm0 = glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals$VerbPos),],
family=binomial(link=logit))
# Main model.
lm1 = glmer(
Aff=="Suff"~factor(VerbPos)+(1|family),
data=d.wals[!is.na(d.wals$VerbPos),],
family=binomial(link=logit))
suffTest = anova(lm0,lm1)
suffTest
hist(res$p)
abline(h=suffTest$Chisq[2])
abline(v=suffTest$Chisq[2])
hist(res$p, xlim=c(0,1))
abline(v=suffTest$Chisq[2])
abline(h=suffTest$Chisq[2])
abline(h=suffTest$`Pr(>Chisq)`[2])
abline(v=suffTest$`Pr(>Chisq)`[2], col=2)
hist(log(res$p))
head(names(d),10)
head(names(d.wals),10)
names(d.wals)
logp = log(res$p)
suffAndWordOrder.p = log(suffTest$`Pr(>Chisq)`[2])
hist(logp, xlim=c(min(min(logp),suffAndWordOrder.p),max(logp)))
min(min(logp),suffAndWordOrder.p)
min(logp)
logp
res$p
res = res[!is.na(res$p),]
res$p
logp = log(res$p)
suffAndWordOrder.p = log(suffTest$`Pr(>Chisq)`[2])
hist(logp, xlim=c(min(min(logp),suffAndWordOrder.p),max(logp)))
abline(v=suffAndWordOrder.p, col=2)
res = data.frame(var='',chi='',df='',p='', stringsAsFactors = F)
for(i in 9:ncol(d.wals)){
if(sum(!is.na(d.wals[,i]) & !is.na(d.wals$Aff))> 50){
lmA0 =
tryCatch(
glmer(
Aff=="Suff"~1+(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
lmA1 =
tryCatch(
glmer(
Aff=="Suff"~
factor(d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),i])+
(1|family),
data=d.wals[!is.na(d.wals[,i]) & !is.na(d.wals$Aff),],
family=binomial(link=logit)),
error=function(e) NA,
warning=function(e) NA
)
if(!is.na(lmA1) & !is.na(lmA0)){
a = anova(lmA0,lmA1)
res = rbind(res,
c(colnames(d.wals)[i],
a$Chisq[2],
a$`Chi Df`[2],
a$`Pr(>Chisq)`[2]))
}
}
}
res$p = as.numeric(res$p)
res = res[!is.na(res$p),]
res = res[!grepl("Order.of", res$var),]
logp = log(res$p)
suffAndWordOrder.p = log(suffTest$`Pr(>Chisq)`[2])
hist(logp, xlim=c(min(min(logp),suffAndWordOrder.p),max(logp)))
abline(v=suffAndWordOrder.p, col=2)
sum(suffAndWordOrder.p <  logp) / length(suffAndWordOrder.p)
sum(suffAndWordOrder.p <  logp)
length(suffAndWordOrder.p)
suffAndWordOrder.p
res
logp = log(res$p)
logp
sum(suffAndWordOrder.p <  logp) / length(logp)
sum(logp <suffAndWordOrder.p) / length(logp)
head(res)
res
res[res$p < suffTest$`Pr(>Chisq)`[2], ]
i
1 -
0.0095238
